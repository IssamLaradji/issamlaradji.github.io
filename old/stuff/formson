"use strict";
var Formson = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // src/index.ts
  var src_exports = {};
  __export(src_exports, {
    toJSON: () => toJSON
  });
  var toJSON = function(formData) {
    const object = {};
    formData.forEach((value, key) => {
      const parts = key.split(/[.\[\]]+/).filter(Boolean);
      let current = object;
      parts.forEach((part, index) => {
        const isLast = index === parts.length - 1;
        const nextPart = parts[index + 1];
        const isNextArray = !isLast && !isNaN(Number(nextPart));
        if (isLast) {
          current[part] = value;
        } else {
          if (isNextArray) {
            if (!Array.isArray(current[part])) {
              current[part] = [];
            }
            current = current[part];
          } else {
            if (!(typeof current[part] === "object" && current[part] !== null)) {
              current[part] = {};
            }
            current = current[part];
          }
        }
      });
    });
    return object;
  };
  return __toCommonJS(src_exports);
})();
//# sourceMappingURL=index.global.js.map